#!/usr/bin/env python3
"""
Community Seeding Script - Bangladesh Agricultural Community Posts
This script creates diverse community posts in Bangla for the TerraPulse application.
"""

from app import create_app, db
from app.models.user import User
from app.models.community import Community, CommunityMember, CommunityPost, PostLike, PostComment
from datetime import datetime, timezone, timedelta
import random
import json

def create_sample_users():
    """Create sample users for community posts"""
    print("Creating sample users...")
    
    users_data = [
        {"full_name": "‡¶∞‡¶π‡¶ø‡¶Æ ‡¶â‡¶¶‡ßç‡¶¶‡¶ø‡¶®", "email": "rahim@example.com", "username": "rahim_uddin", "district": "‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ", "primary_crop": "‡¶ß‡¶æ‡¶®"},
        {"full_name": "‡¶´‡¶æ‡¶§‡ßá‡¶Æ‡¶æ ‡¶ñ‡¶æ‡¶§‡ßÅ‡¶®", "email": "fatema@example.com", "username": "fatema_khatun", "district": "‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞", "primary_crop": "‡¶Ü‡¶≤‡ßÅ"},
        {"full_name": "‡¶Ü‡¶¨‡¶¶‡ßÅ‡¶≤ ‡¶ï‡¶∞‡¶ø‡¶Æ", "email": "karim@example.com", "username": "abdul_karim", "district": "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤", "primary_crop": "‡¶™‡¶æ‡¶ü"},
        {"full_name": "‡¶∞‡¶æ‡¶∂‡¶ø‡¶¶‡¶æ ‡¶¨‡ßá‡¶ó‡¶Æ", "email": "rashida@example.com", "username": "rashida_begum", "district": "‡¶∏‡¶ø‡¶≤‡ßá‡¶ü", "primary_crop": "‡¶ö‡¶æ"},
        {"full_name": "‡¶Æ‡ßã‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶Ü‡¶≤‡ßÄ", "email": "ali@example.com", "username": "mohammad_ali", "district": "‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞", "primary_crop": "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ"},
        {"full_name": "‡¶∏‡¶æ‡¶≤‡¶Æ‡¶æ ‡¶Ü‡¶ï‡ßç‡¶§‡¶æ‡¶∞", "email": "salma@example.com", "username": "salma_akter", "district": "‡¶Ø‡¶∂‡ßã‡¶∞", "primary_crop": "‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ"},
        {"full_name": "‡¶®‡¶æ‡¶ú‡¶Æ‡ßÅ‡¶≤ ‡¶π‡¶ï", "email": "nazmul@example.com", "username": "nazmul_hoque", "district": "‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ", "primary_crop": "‡¶§‡ßÅ‡¶≤‡¶æ"},
        {"full_name": "‡¶∞‡ßã‡¶ï‡ßá‡¶Ø‡¶º‡¶æ ‡¶ñ‡¶æ‡¶§‡ßÅ‡¶®", "email": "rokeya@example.com", "username": "rokeya_khatun", "district": "‡¶™‡¶æ‡¶¨‡¶®‡¶æ", "primary_crop": "‡¶ß‡¶æ‡¶®"},
        {"full_name": "‡¶Ü‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶π‡ßã‡¶∏‡ßá‡¶®", "email": "anowar@example.com", "username": "anowar_hossain", "district": "‡¶´‡¶∞‡¶ø‡¶¶‡¶™‡ßÅ‡¶∞", "primary_crop": "‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú"},
        {"full_name": "‡¶®‡¶æ‡¶∏‡¶∞‡¶ø‡¶® ‡¶∏‡ßÅ‡¶≤‡¶§‡¶æ‡¶®‡¶æ", "email": "nasrin@example.com", "username": "nasrin_sultana", "district": "‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤", "primary_crop": "‡¶ü‡¶Æ‡ßá‡¶ü‡ßã"}
    ]
    
    created_users = []
    for user_data in users_data:
        existing_user = User.query.filter_by(email=user_data['email']).first()
        if not existing_user:
            user = User(
                username=user_data['username'],
                password='demo123',  # Simple password for demo users
                full_name=user_data['full_name'],
                email=user_data['email'],
                district=user_data['district'],
                primary_crop=user_data['primary_crop'],
                farm_size=random.randint(1, 50),
                onboarding_completed=True
            )
            created_users.append(user)
            db.session.add(user)
    
    try:
        db.session.commit()
        print(f"Created {len(created_users)} sample users")
        return created_users
    except Exception as e:
        db.session.rollback()
        print(f"Error creating users: {e}")
        return []

def create_sample_communities():
    """Create sample communities"""
    print("Creating sample communities...")
    
    # Get a user to be the creator
    users = User.query.all()
    if not users:
        print("No users available to create communities")
        return []
    
    creator = users[0]  # Use first user as creator
    
    communities_data = [
        {
            'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶∑‡¶ø ‡¶∏‡¶Æ‡¶ø‡¶§‡¶ø',
            'description': '‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶∑‡¶ø‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ, ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ì ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ',
            'category': '‡¶ß‡¶æ‡¶®',
            'district': '‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡ßá‡¶∂',
            'location': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂'
        },
        {
            'name': '‡¶ú‡ßà‡¶¨ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï',
            'description': '‡¶ü‡ßá‡¶ï‡¶∏‡¶á ‡¶ì ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨ ‡¶ö‡¶æ‡¶∑‡¶æ‡¶¨‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ú‡ßà‡¶¨ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ',
            'category': '‡¶ú‡ßà‡¶¨',
            'district': '‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡ßá‡¶∂',
            'location': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂'
        },
        {
            'name': '‡¶∏‡¶¨‡¶ú‡¶ø ‡¶ö‡¶æ‡¶∑‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™',
            'description': '‡¶∏‡¶¨‡¶ú‡¶ø ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø, ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶¶‡¶∞ ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂',
            'category': '‡¶∏‡¶¨‡¶ú‡¶ø',
            'district': '‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡ßá‡¶∂',
            'location': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂'
        },
        {
            'name': '‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶´‡ßã‡¶∞‡¶æ‡¶Æ',
            'description': '‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø, ‡¶Ø‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶™‡¶æ‡¶§‡¶ø ‡¶ì ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶ö‡¶æ‡¶∑‡¶æ‡¶¨‡¶æ‡¶¶',
            'category': '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø',
            'district': '‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡ßá‡¶∂',
            'location': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂'
        }
    ]
    
    created_communities = []
    for comm_data in communities_data:
        existing_comm = Community.query.filter_by(name=comm_data['name']).first()
        if not existing_comm:
            community = Community(
                name=comm_data['name'],
                description=comm_data['description'],
                category=comm_data['category'],
                district=comm_data['district'],
                location=comm_data['location'],
                created_by=creator.id,
                is_public=True,
                is_active=True,
                member_count=random.randint(50, 500)
            )
            created_communities.append(community)
            db.session.add(community)
    
    try:
        db.session.commit()
        print(f"Created {len(created_communities)} communities")
        return created_communities
    except Exception as e:
        db.session.rollback()
        print(f"Error creating communities: {e}")
        return []

def create_bangla_posts():
    """Create comprehensive Bangla community posts"""
    print("Creating Bangla community posts...")
    
    users = User.query.all()
    communities = Community.query.all()
    
    if not users or not communities:
        print("No users or communities found. Please create them first.")
        return
    
    # Diverse Bangla posts with different types and content
    posts_data = [
        # Question Posts
        {
            "title": "‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶æ‡¶§‡¶æ ‡¶π‡¶≤‡ßÅ‡¶¶ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá - ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡ßÄ?",
            "content": "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶ó‡¶§ ‡ß®-‡ß© ‡¶¶‡¶ø‡¶® ‡¶ß‡¶∞‡ßá ‡¶™‡¶æ‡¶§‡¶æ ‡¶π‡¶≤‡ßÅ‡¶¶ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶•‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶¨‡ßá? ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶ï‡ßÉ‡¶∑‡¶ï ‡¶≠‡¶æ‡¶á‡¶¶‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ö‡¶æ‡¶á‡•§ üåæ",
            "type": "question",
            "category": "‡¶ß‡¶æ‡¶®",
            "tags": ["‡¶ß‡¶æ‡¶®", "‡¶∞‡ßã‡¶ó-‡¶¨‡¶æ‡¶≤‡¶æ‡¶á", "‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂"]
        },
        {
            "title": "‡¶Ü‡¶≤‡ßÅ‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶Æ‡¶® ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá?",
            "content": "‡¶è ‡¶¨‡¶õ‡¶∞ ‡¶Ü‡¶≤‡ßÅ‡¶∞ ‡¶´‡¶≤‡¶® ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¶‡¶æ‡¶Æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶õ‡¶ø‡•§ ‡¶ï‡ßã‡¶® ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶¶‡¶æ‡¶Æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá? ‡¶ï‡¶ñ‡¶® ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡¶≤‡ßá ‡¶≤‡¶æ‡¶≠‡¶ú‡¶®‡¶ï ‡¶π‡¶¨‡ßá? ü•îüí∞",
            "type": "question",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶Ü‡¶≤‡ßÅ", "‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞-‡¶¶‡¶∞", "‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º"]
        },
        {
            "title": "‡¶ú‡ßà‡¶¨ ‡¶∏‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶π‡¶ú ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á",
            "content": "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶¨‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶ú‡ßà‡¶¨ ‡¶∏‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡•§ ‡¶ò‡¶∞‡ßá ‡¶¨‡¶∏‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ú‡ßà‡¶¨ ‡¶∏‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º? ‡¶ï‡ßã‡¶® ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá? üå±‚ôªÔ∏è",
            "type": "question", 
            "category": "‡¶ú‡ßà‡¶¨",
            "tags": ["‡¶ú‡ßà‡¶¨-‡¶∏‡¶æ‡¶∞", "‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂", "‡¶ñ‡¶∞‡¶ö-‡¶∏‡¶æ‡¶∂‡ßç‡¶∞‡¶Ø‡¶º"]
        },
        
        # Tips & Advice Posts  
        {
            "title": "‡¶ö‡¶æ ‡¶¨‡¶æ‡¶ó‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ‡¶ü‡¶®‡¶æ‡¶∂‡¶ï ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶™‡ßã‡¶ï‡¶æ ‡¶¶‡¶Æ‡¶®",
            "content": "‡ß®‡ß¶ ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ‡¶Ø‡¶º ‡¶¶‡ßá‡¶ñ‡ßá‡¶õ‡¶ø ‡¶®‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶§‡ßá‡¶≤ ‡¶ì ‡¶∏‡¶æ‡¶¨‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞‡¶£ ‡¶ö‡¶æ ‡¶ó‡¶æ‡¶õ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡•§ ‡ßß ‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶®‡¶ø‡¶§‡ßá ‡ß® ‡¶ö‡¶æ‡¶Æ‡¶ö ‡¶®‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶§‡ßá‡¶≤ ‡¶ì ‡ßß ‡¶ö‡¶æ‡¶Æ‡¶ö ‡¶§‡¶∞‡¶≤ ‡¶∏‡¶æ‡¶¨‡¶æ‡¶® ‡¶Æ‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡ßç‡¶™‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá ‡ß® ‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶™‡ßã‡¶ï‡¶æ‡¶∞ ‡¶â‡¶™‡¶¶‡ßç‡¶∞‡¶¨ ‡¶ï‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§ üçÉüõ°Ô∏è",
            "type": "tip",
            "category": "‡¶ú‡ßà‡¶¨", 
            "tags": ["‡¶ö‡¶æ", "‡¶ú‡ßà‡¶¨-‡¶¶‡¶Æ‡¶®", "‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂-‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨"]
        },
        {
            "title": "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ ‡¶ö‡¶æ‡¶∑‡ßá ‡¶∏‡ßá‡¶ö ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ",
            "content": "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ ‡¶ö‡¶æ‡¶∑‡ßá ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡•§ ‡¶¨‡ßÄ‡¶ú ‡¶¨‡¶™‡¶®‡ßá‡¶∞ ‡ßß‡ß´-‡ß®‡ß¶ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶®‡•§ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡ßß‡ß´ ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶®‡ßç‡¶§‡¶∞ ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶≤‡ßá ‡¶´‡¶≤‡¶® ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶Ø‡¶º‡•§ ‡¶Æ‡¶æ‡¶ü‡¶ø‡¶§‡ßá ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ ‡ß≠‡ß¶-‡ßÆ‡ß¶% ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ üåΩüíß",
            "type": "tip",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ", "‡¶∏‡ßá‡¶ö", "‡¶´‡¶≤‡¶®-‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø"]
        },
        {
            "title": "‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ‡¶∞ ‡¶¨‡ßÄ‡¶ú ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º",
            "content": "‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ‡¶∞ ‡¶¨‡ßÄ‡¶ú ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶∞‡ßá ‡¶∞‡ßã‡¶¶‡ßá ‡¶∂‡ßÅ‡¶ï‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶®‡•§ ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ ‡ßÆ% ‡¶è‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶Ü‡¶®‡ßÅ‡¶®‡•§ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ‡¶∞‡ßã‡¶ß‡ßÄ ‡¶™‡¶æ‡¶§‡ßç‡¶∞‡ßá ‡¶®‡¶ø‡¶Æ‡¶™‡¶æ‡¶§‡¶æ ‡¶ì ‡¶π‡¶≤‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶Å‡¶°‡¶º‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®‡•§ ‡¶è‡¶§‡ßá ‡¶™‡ßã‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶ï‡ßç‡¶∞‡¶Æ‡¶£ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§ üåªüì¶",
            "type": "tip",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø", 
            "tags": ["‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ", "‡¶¨‡ßÄ‡¶ú-‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£", "‡¶™‡ßã‡¶ï‡¶æ-‡¶¶‡¶Æ‡¶®"]
        },
        
        # Market & Price Posts
        {
            "title": "‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ‡¶§‡ßá ‡¶§‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
            "content": "‡¶Ü‡¶ú‡¶ï‡ßá ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá ‡¶§‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶£ ‡ß©‡ß®‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ! ‡¶ó‡¶§ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡ß®‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá‡¶ì ‡¶¶‡¶æ‡¶Æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶ï‡ßÉ‡¶∑‡¶ï ‡¶≠‡¶æ‡¶á‡¶∞‡¶æ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶®‡¶ø‡¶®‡•§ üè∑Ô∏èüìà",
            "type": "market",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶§‡ßÅ‡¶≤‡¶æ", "‡¶¶‡¶æ‡¶Æ-‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø", "‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ"]
        },
        {
            "title": "‡¶™‡¶æ‡¶¨‡¶®‡¶æ‡¶Ø‡¶º ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
            "content": "‡¶™‡¶æ‡¶¨‡¶®‡¶æ ‡¶∏‡¶¶‡¶∞‡ßá ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶ß‡¶æ‡¶® ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶£ ‡ßß‡ß¶‡ß™‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡¶∞‡ßá ‡¶ï‡¶ø‡¶®‡¶õ‡ßá‡•§ ‡¶ï‡ßÉ‡¶∑‡¶ï‡¶∞‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶ó‡¶ú‡¶™‡¶§‡ßç‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§ üèõÔ∏èüåæ",
            "type": "market",
            "category": "‡¶ß‡¶æ‡¶®",
            "tags": ["‡¶ß‡¶æ‡¶®", "‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø-‡¶ï‡ßç‡¶∞‡¶Ø‡¶º", "‡¶™‡¶æ‡¶¨‡¶®‡¶æ"]
        },
        {
            "title": "‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó",
            "content": "‡¶è ‡¶¨‡¶õ‡¶∞ ‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú‡ßá‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶´‡¶≤‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∂‡ßÅ‡¶®‡ßá‡¶õ‡¶ø ‡¶≠‡¶æ‡¶∞‡¶§‡ßá ‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶Ü‡¶õ‡ßá‡•§ ‡¶ï‡ßá‡¶â ‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡ßá‡¶®? ‡¶ï‡ßã‡¶® ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶¨‡ßá? üßÖüö¢",
            "type": "market",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú", "‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø", "‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ"]
        },
        
        # Alert & Warning Posts
        {
            "title": "üö® ‡¶ü‡¶Æ‡ßá‡¶ü‡ßã‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶¶‡ßÅ‡¶∞‡ßç‡¶≠‡¶æ‡¶¨!",
            "content": "‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶ü‡¶Æ‡ßá‡¶ü‡ßã ‡¶ó‡¶æ‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶æ‡¶§‡¶æ ‡¶ï‡ßÅ‡¶Å‡¶ï‡¶°‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶ì ‡¶´‡¶≤ ‡¶™‡¶ö‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá ‡¶¶‡ßá‡¶ñ‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶∏‡¶¨‡¶æ‡¶á ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶® ‡¶ì ‡¶Ü‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶ó‡¶æ‡¶õ ‡¶§‡ßÅ‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®‡•§ ‚ö†Ô∏èüçÖ",
            "type": "alert",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶ü‡¶Æ‡ßá‡¶ü‡ßã", "‡¶∞‡ßã‡¶ó-‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ", "‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤"]
        },
        {
            "title": "‚ö†Ô∏è ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡ß© ‡¶¶‡¶ø‡¶® ‡¶≠‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ",
            "content": "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡ß© ‡¶¶‡¶ø‡¶® ‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ ‡¶Ö‡¶û‡ßç‡¶ö‡¶≤‡ßá ‡¶≠‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶ß‡¶æ‡¶® ‡¶ï‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶§‡¶æ‡¶°‡¶º‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶ú‡¶≤ ‡¶ú‡¶Æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ üåßÔ∏è‚õàÔ∏è",
            "type": "alert",
            "category": "‡¶ß‡¶æ‡¶®", 
            "tags": ["‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ", "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø-‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ", "‡¶ß‡¶æ‡¶®-‡¶ï‡¶æ‡¶ü‡¶æ"]
        },
        
        # Success Stories
        {
            "title": "‡¶ú‡ßà‡¶¨ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶ü ‡¶ö‡¶æ‡¶∑‡ßá ‡¶∏‡¶´‡¶≤‡¶§‡¶æ! üéâ",
            "content": "‡¶è ‡¶¨‡¶õ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ú‡ßà‡¶¨ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶ü ‡¶ö‡¶æ‡¶∑ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§ ‡¶ï‡ßã‡¶® ‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶ï‡ßÄ‡¶ü‡¶®‡¶æ‡¶∂‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ö‡¶•‡¶ö ‡¶´‡¶≤‡¶® ‡¶ó‡¶§‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡ß®‡ß¶% ‡¶¨‡ßá‡¶∂‡¶ø! ‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶æ‡¶ó‡ßÅ‡¶£‡¶ì ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£ ‡¶π‡¶≤‡ßã ‡¶ú‡ßà‡¶¨ ‡¶ö‡¶æ‡¶∑ ‡¶≤‡¶æ‡¶≠‡¶ú‡¶®‡¶ï‡•§ üå±‚ú®",
            "type": "success",
            "category": "‡¶ú‡ßà‡¶¨",
            "tags": ["‡¶™‡¶æ‡¶ü", "‡¶ú‡ßà‡¶¨-‡¶ö‡¶æ‡¶∑", "‡¶∏‡¶´‡¶≤‡¶§‡¶æ"]
        },
        {
            "title": "‡¶®‡¶§‡ßÅ‡¶® ‡¶ú‡¶æ‡¶§‡ßá‡¶∞ ‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ‡¶Ø‡¶º ‡¶¶‡ßç‡¶¨‡¶ø‡¶ó‡ßÅ‡¶£ ‡¶Ü‡¶Ø‡¶º!",
            "content": "‡¶è‡¶¨‡¶æ‡¶∞ BARI ‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ-‡ßØ ‡¶ú‡¶æ‡¶§ ‡¶ö‡¶æ‡¶∑ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ú‡¶æ‡¶§‡ßá‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶ñ‡¶∞‡¶ö ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶≤‡ßá‡¶ì ‡¶´‡¶≤‡¶® ‡¶¶‡ßç‡¶¨‡¶ø‡¶ó‡ßÅ‡¶£ ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶è‡¶ï‡¶∞‡ßá ‡ß®‡ß´ ‡¶Æ‡¶£ ‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡ßá‡¶ì ‡¶è‡¶á ‡¶ú‡¶æ‡¶§‡¶á ‡¶ö‡¶æ‡¶∑ ‡¶ï‡¶∞‡¶¨‡ßã‡•§ üåΩüí∞",
            "type": "success",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ", "‡¶®‡¶§‡ßÅ‡¶®-‡¶ú‡¶æ‡¶§", "‡¶≤‡¶æ‡¶≠‡¶ú‡¶®‡¶ï"]
        },
        
        # Technology & Innovation Posts
        {
            "title": "‡¶°‡ßç‡¶∞‡ßã‡¶® ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ",
            "content": "‡¶ó‡¶§ ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶∏‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶°‡ßç‡¶∞‡ßã‡¶® ‡¶∏‡ßá‡¶¨‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡¶°‡ßç‡¶∞‡ßã‡¶® ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ú‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶≤‡ßã ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá, ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶ï‡¶Æ‡•§ ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡ßá‡¶¨‡¶æ‡•§ ‡¶∏‡¶¨‡¶æ‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ üöÅüåæ",
            "type": "technology",
            "category": "‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø",
            "tags": ["‡¶°‡ßç‡¶∞‡ßã‡¶®", "‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï-‡¶ö‡¶æ‡¶∑", "‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø"]
        },
        {
            "title": "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤",
            "content": "‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶§‡ßÅ‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶è‡¶∏‡ßá ‡¶ó‡ßá‡¶õ‡ßá! ‡¶ï‡ßÄ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶∏‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶∏‡¶¨ ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶ñ‡¶∞‡¶ö‡¶ì ‡¶ï‡¶Æ‡•§ üì±üß™",
            "type": "technology",
            "category": "‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø",
            "tags": ["‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤-‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™", "‡¶Æ‡¶æ‡¶ü‡¶ø-‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ", "‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤"]
        },
        
        # Additional diverse posts
        {
            "title": "‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶¨‡¶ú‡¶ø ‡¶ö‡¶æ‡¶∑‡ßá ‡¶≤‡¶æ‡¶≠‡¶¨‡¶æ‡¶® ‡¶π‡¶®",
            "content": "‡¶∂‡ßÄ‡¶§‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶∏‡¶¨‡¶ú‡¶ø ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶∏‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶ó‡¶æ‡¶ú‡¶∞, ‡¶Æ‡ßÅ‡¶≤‡¶æ, ‡¶∂‡¶æ‡¶ï‡¶∏‡¶¨‡¶ú‡¶ø ‡¶è‡¶ñ‡¶®‡¶á ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡•§ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§ ‡¶ï‡¶Æ ‡¶ñ‡¶∞‡¶ö‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶≤‡¶æ‡¶≠ ‡¶™‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶®‡¶á ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ü•ïü•¨",
            "type": "tip",
            "category": "‡¶∏‡¶¨‡¶ú‡¶ø",
            "tags": ["‡¶∂‡ßÄ‡¶§‡¶ï‡¶æ‡¶≤‡ßÄ‡¶®-‡¶∏‡¶¨‡¶ú‡¶ø", "‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡¶ø-‡¶ö‡¶æ‡¶∑", "‡¶≤‡¶æ‡¶≠‡¶ú‡¶®‡¶ï"]
        },
        {
            "title": "‡¶Æ‡¶æ‡¶õ ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶∑",
            "content": "‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶Æ‡¶æ‡¶õ ‡¶ö‡¶æ‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶Ü‡¶Ø‡¶º ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶™‡¶æ‡¶®‡¶ø‡¶§‡ßá ‡¶ï‡¶æ‡¶∞‡ßç‡¶™ ‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶õ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡¶§‡¶ø ‡¶π‡¶Ø‡¶º ‡¶®‡¶æ, ‡¶¨‡¶∞‡¶Ç ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶ú‡ßç‡¶Ø ‡¶∏‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§ ‡¶¶‡ßÅ‡¶ü‡ßã ‡¶´‡¶∏‡¶≤ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá! üêüüåæ",
            "type": "success",
            "category": "‡¶ß‡¶æ‡¶®",
            "tags": ["‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞-‡¶ö‡¶æ‡¶∑", "‡¶Æ‡¶æ‡¶õ-‡¶ß‡¶æ‡¶®", "‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§-‡¶Ü‡¶Ø‡¶º"]
        }
    ]
    
    created_posts = []
    base_time = datetime.now(timezone.utc)
    
    for i, post_data in enumerate(posts_data):
        # Assign random user and community
        user = random.choice(users)
        community = random.choice(communities)
        
        # Create post with timestamp in last 30 days
        post_time = base_time - timedelta(
            days=random.randint(0, 30),
            hours=random.randint(0, 23), 
            minutes=random.randint(0, 59)
        )
        
        post = CommunityPost(
            community_id=community.id,
            user_id=user.id,
            content=post_data['content'],
            post_type=post_data['type'],
            title=post_data.get('title'),
            tags=post_data.get('tags'),
            location=post_data.get('location'),
            is_active=True,
            likes_count=random.randint(5, 150),
            comments_count=random.randint(0, 35),
            shares_count=random.randint(10, 500),
            created_at=post_time,
            updated_at=post_time
        )
        
        created_posts.append(post)
        db.session.add(post)
        
        # Add some random likes
        like_count = random.randint(3, 15)
        potential_likers = random.sample(users, min(like_count, len(users)))
        
        for liker in potential_likers:
            if liker.id != user.id:  # Don't like own post
                like = PostLike(
                    post_id=post.id,
                    user_id=liker.id
                )
                db.session.add(like)
        
        # Add some random comments
        comment_count = random.randint(1, 8)
        potential_commenters = random.sample(users, min(comment_count, len(users)))
        
        sample_comments = [
            "‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡ßã‡¶∏‡ßç‡¶ü! ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶≠‡¶æ‡¶á‡•§ üëç",
            "‡¶Ü‡¶Æ‡¶ø‡¶ì ‡¶è‡¶á ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø, ‡¶ï‡¶æ‡¶ú ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
            "‡¶Ü‡¶∞‡ßã ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡•§ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡•§",
            "‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø! ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º‡¶ì ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡•§",
            "‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶∞‡ßã ‡¶è‡¶∞‡¶ï‡¶Æ ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶¶‡¶ø‡¶®‡•§",
            "‡¶™‡ßç‡¶∞‡¶∂‡¶Ç‡¶∏‡¶®‡ßÄ‡¶Ø‡¶º ‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ó‡•§ ‡¶è‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶® ‡¶≠‡¶æ‡¶á‡•§ üí™",
            "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ñ‡¶æ‡¶Æ‡¶æ‡¶∞‡ßá‡¶ì ‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶™‡ßá‡¶≤‡¶æ‡¶Æ‡•§",
            "‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ‡•§ üôè"
        ]
        
        for commenter in potential_commenters:
            if commenter.id != user.id:  # Don't comment on own post
                comment = PostComment(
                    post_id=post.id,
                    author_id=commenter.id,
                    content=random.choice(sample_comments),
                    is_active=True,
                    created_at=post_time + timedelta(hours=random.randint(1, 48))
                )
                db.session.add(comment)
    
    try:
        db.session.commit()
        print(f"Created {len(created_posts)} Bangla community posts with interactions")
        return created_posts
    except Exception as e:
        db.session.rollback()
        print(f"Error creating posts: {e}")
        return []

def main():
    """Main seeding function"""
    app = create_app()
    
    with app.app_context():
        print("Starting community seeding process...")
        
        # Create sample data
        users = create_sample_users()
        communities = create_sample_communities()
        posts = create_bangla_posts()
        
        print(f"\nSeeding completed successfully!")
        print(f"- Users: {len(User.query.all())}")
        print(f"- Communities: {len(Community.query.all())}")
        print(f"- Posts: {len(CommunityPost.query.all())}")
        print(f"- Likes: {len(PostLike.query.all())}")
        print(f"- Comments: {len(PostComment.query.all())}")

if __name__ == "__main__":
    main()